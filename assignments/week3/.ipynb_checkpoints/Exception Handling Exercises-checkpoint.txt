Exception Handling Exercises:

Exercise 1: Handling ZeroDivisionError
Problem:
Write a Python program that asks the user to enter a number and then divides 10 by the entered number. Handle the ZeroDivisionError gracefully and print a message saying "Cannot divide by zero".


Exercise 2: Handling ValueError
Problem:
Write a Python program that prompts the user to enter a number. If the user enters a non-numeric input, catch the ValueError and display the message "Invalid input! Please enter a valid number."


Exercise 3: Multiple Exception Handling
Problem:
Write a Python program that takes a list of integers and tries to access an index entered by the user. If the index is out of range, catch the IndexError. If the input is not an integer, catch the ValueError.


Exercise 4: Using else and finally
Problem:
Write a program that prompts the user to enter a number, divides 100 by that number, and prints the result. Use the else block to print "Operation successful" if no exception occurs, and the finally block to print "Execution finished" no matter what.


Exercise 5: Raising Custom Exception
Problem:
Write a Python program that defines a custom exception called AgeException. If a user enters an age less than 18, raise the AgeException with the message "Age must be 18 or older."


Exercise 6: Handling KeyError
Problem:
Write a Python program that tries to access a value from a dictionary using a key entered by the user. If the key doesn't exist, catch the KeyError and print "Key not found in the dictionary."


Exercise 7: Creating and Using Custom Exception
Problem:
Create a custom exception called NegativeNumberException. Write a program that takes a number as input and raises this exception if the number is negative. Catch the exception and print a custom message.


Exercise 8: Catching FileNotFoundError
Problem:
Write a Python program that tries to open a file named "example.txt". If the file does not exist, catch the FileNotFoundError and display a message "File not found."


Exercise 9: Handling Multiple Exceptions Using a Single Except Block
Problem:
Write a Python program that asks the user to enter two numbers. If the user enters non-numeric values, catch the ValueError. If the user tries to divide by zero, catch the ZeroDivisionError.


Exercise 10: Using finally for Cleanup
Problem:
Write a Python program that opens a file for writing, writes some text, and then closes the file. Use the finally block to ensure that the file is always closed, even if an error occurs during writing.

